// <auto-generated/>
#nullable enable

namespace ContractingWorks.ReadApi
{
    /// <summary>
    /// If the argument externalSystemId (Int) is provided to the root query entity, it will be implicitly used to resolve any ext_ fields in the query.
    /// Note that if the variable is omitted, if ExternalSystemID is configured on the user performing the query this value will be used.
    /// Integration service users should normally have ExternalSystemID configured.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.14.0")]
    public partial class GetCustomerResult : global::System.IEquatable<GetCustomerResult>, IGetCustomerResult
    {
        public GetCustomerResult(global::ContractingWorks.ReadApi.IGetCustomer_Customers? customers)
        {
            Customers = customers;
        }

        public global::ContractingWorks.ReadApi.IGetCustomer_Customers? Customers { get; }

        public virtual global::System.Boolean Equals(GetCustomerResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Customers is null && other.Customers is null) || Customers != null && Customers.Equals(other.Customers)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetCustomerResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Customers != null)
                {
                    hash ^= 397 * Customers.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.14.0")]
    public partial class GetCustomer_Customers_CustomerSet : global::System.IEquatable<GetCustomer_Customers_CustomerSet>, IGetCustomer_Customers_CustomerSet
    {
        public GetCustomer_Customers_CustomerSet(global::System.Collections.Generic.IReadOnlyList<global::ContractingWorks.ReadApi.IGetCustomer_Customers_Items>? items)
        {
            Items = items;
        }

        /// <summary>
        /// The items in the set
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::ContractingWorks.ReadApi.IGetCustomer_Customers_Items>? Items { get; }

        public virtual global::System.Boolean Equals(GetCustomer_Customers_CustomerSet? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Internal.ComparisonHelper.SequenceEqual(Items, other.Items));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetCustomer_Customers_CustomerSet)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Items != null)
                {
                    foreach (var Items_elm in Items)
                    {
                        hash ^= 397 * Items_elm.GetHashCode();
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.14.0")]
    public partial class GetCustomer_Customers_Items_Customer : global::System.IEquatable<GetCustomer_Customers_Items_Customer>, IGetCustomer_Customers_Items_Customer
    {
        public GetCustomer_Customers_Items_Customer(global::System.Int32 customerId, global::System.Int32? customerNumber, global::System.String? name, global::System.String? email, global::ContractingWorks.ReadApi.IGetCustomer_Customers_Items_PaymentTerm? paymentTerm)
        {
            CustomerId = customerId;
            CustomerNumber = customerNumber;
            Name = name;
            Email = email;
            PaymentTerm = paymentTerm;
        }

        public global::System.Int32 CustomerId { get; }

        public global::System.Int32? CustomerNumber { get; }

        public global::System.String? Name { get; }

        public global::System.String? Email { get; }

        public global::ContractingWorks.ReadApi.IGetCustomer_Customers_Items_PaymentTerm? PaymentTerm { get; }

        public virtual global::System.Boolean Equals(GetCustomer_Customers_Items_Customer? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::System.Object.Equals(CustomerId, other.CustomerId)) && global::System.Object.Equals(CustomerNumber, other.CustomerNumber) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)) && ((Email is null && other.Email is null) || Email != null && Email.Equals(other.Email)) && ((PaymentTerm is null && other.PaymentTerm is null) || PaymentTerm != null && PaymentTerm.Equals(other.PaymentTerm));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetCustomer_Customers_Items_Customer)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * CustomerId.GetHashCode();
                if (CustomerNumber != null)
                {
                    hash ^= 397 * CustomerNumber.GetHashCode();
                }

                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                if (Email != null)
                {
                    hash ^= 397 * Email.GetHashCode();
                }

                if (PaymentTerm != null)
                {
                    hash ^= 397 * PaymentTerm.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.14.0")]
    public partial class GetCustomer_Customers_Items_PaymentTerm_PaymentTerm : global::System.IEquatable<GetCustomer_Customers_Items_PaymentTerm_PaymentTerm>, IGetCustomer_Customers_Items_PaymentTerm_PaymentTerm
    {
        public GetCustomer_Customers_Items_PaymentTerm_PaymentTerm(global::System.Int16 paymentTermId, global::System.Int16 days, global::System.Boolean daysStartNextMonth, global::System.String description)
        {
            PaymentTermId = paymentTermId;
            Days = days;
            DaysStartNextMonth = daysStartNextMonth;
            Description = description;
        }

        public global::System.Int16 PaymentTermId { get; }

        public global::System.Int16 Days { get; }

        public global::System.Boolean DaysStartNextMonth { get; }

        public global::System.String Description { get; }

        public virtual global::System.Boolean Equals(GetCustomer_Customers_Items_PaymentTerm_PaymentTerm? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::System.Object.Equals(PaymentTermId, other.PaymentTermId)) && global::System.Object.Equals(Days, other.Days) && global::System.Object.Equals(DaysStartNextMonth, other.DaysStartNextMonth) && Description.Equals(other.Description);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetCustomer_Customers_Items_PaymentTerm_PaymentTerm)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * PaymentTermId.GetHashCode();
                hash ^= 397 * Days.GetHashCode();
                hash ^= 397 * DaysStartNextMonth.GetHashCode();
                hash ^= 397 * Description.GetHashCode();
                return hash;
            }
        }
    }

    /// <summary>
    /// If the argument externalSystemId (Int) is provided to the root query entity, it will be implicitly used to resolve any ext_ fields in the query.
    /// Note that if the variable is omitted, if ExternalSystemID is configured on the user performing the query this value will be used.
    /// Integration service users should normally have ExternalSystemID configured.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.14.0")]
    public partial interface IGetCustomerResult
    {
        public global::ContractingWorks.ReadApi.IGetCustomer_Customers? Customers { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.14.0")]
    public partial interface IGetCustomer_Customers
    {
        /// <summary>
        /// The items in the set
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::ContractingWorks.ReadApi.IGetCustomer_Customers_Items>? Items { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.14.0")]
    public partial interface IGetCustomer_Customers_CustomerSet : IGetCustomer_Customers
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.14.0")]
    public partial interface IGetCustomer_Customers_Items
    {
        public global::System.Int32 CustomerId { get; }

        public global::System.Int32? CustomerNumber { get; }

        public global::System.String? Name { get; }

        public global::System.String? Email { get; }

        public global::ContractingWorks.ReadApi.IGetCustomer_Customers_Items_PaymentTerm? PaymentTerm { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.14.0")]
    public partial interface IGetCustomer_Customers_Items_Customer : IGetCustomer_Customers_Items
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.14.0")]
    public partial interface IGetCustomer_Customers_Items_PaymentTerm
    {
        public global::System.Int16 PaymentTermId { get; }

        public global::System.Int16 Days { get; }

        public global::System.Boolean DaysStartNextMonth { get; }

        public global::System.String Description { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.14.0")]
    public partial interface IGetCustomer_Customers_Items_PaymentTerm_PaymentTerm : IGetCustomer_Customers_Items_PaymentTerm
    {
    }

    /// <summary>
    /// If the argument externalSystemId (Int) is provided to the root query entity, it will be implicitly used to resolve any ext_ fields in the query.
    /// Note that if the variable is omitted, if ExternalSystemID is configured on the user performing the query this value will be used.
    /// Integration service users should normally have ExternalSystemID configured.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.14.0")]
    public partial class GetPaymentTermResult : global::System.IEquatable<GetPaymentTermResult>, IGetPaymentTermResult
    {
        public GetPaymentTermResult(global::ContractingWorks.ReadApi.IGetPaymentTerm_PaymentTerms? paymentTerms)
        {
            PaymentTerms = paymentTerms;
        }

        public global::ContractingWorks.ReadApi.IGetPaymentTerm_PaymentTerms? PaymentTerms { get; }

        public virtual global::System.Boolean Equals(GetPaymentTermResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((PaymentTerms is null && other.PaymentTerms is null) || PaymentTerms != null && PaymentTerms.Equals(other.PaymentTerms)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPaymentTermResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (PaymentTerms != null)
                {
                    hash ^= 397 * PaymentTerms.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.14.0")]
    public partial class GetPaymentTerm_PaymentTerms_PaymentTermSet : global::System.IEquatable<GetPaymentTerm_PaymentTerms_PaymentTermSet>, IGetPaymentTerm_PaymentTerms_PaymentTermSet
    {
        public GetPaymentTerm_PaymentTerms_PaymentTermSet(global::System.Collections.Generic.IReadOnlyList<global::ContractingWorks.ReadApi.IGetPaymentTerm_PaymentTerms_Items>? items)
        {
            Items = items;
        }

        /// <summary>
        /// The items in the set
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::ContractingWorks.ReadApi.IGetPaymentTerm_PaymentTerms_Items>? Items { get; }

        public virtual global::System.Boolean Equals(GetPaymentTerm_PaymentTerms_PaymentTermSet? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Internal.ComparisonHelper.SequenceEqual(Items, other.Items));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPaymentTerm_PaymentTerms_PaymentTermSet)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Items != null)
                {
                    foreach (var Items_elm in Items)
                    {
                        hash ^= 397 * Items_elm.GetHashCode();
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.14.0")]
    public partial class GetPaymentTerm_PaymentTerms_Items_PaymentTerm : global::System.IEquatable<GetPaymentTerm_PaymentTerms_Items_PaymentTerm>, IGetPaymentTerm_PaymentTerms_Items_PaymentTerm
    {
        public GetPaymentTerm_PaymentTerms_Items_PaymentTerm(global::System.Int16 paymentTermId, global::System.Int16 days, global::System.Boolean daysStartNextMonth, global::System.String description)
        {
            PaymentTermId = paymentTermId;
            Days = days;
            DaysStartNextMonth = daysStartNextMonth;
            Description = description;
        }

        public global::System.Int16 PaymentTermId { get; }

        public global::System.Int16 Days { get; }

        public global::System.Boolean DaysStartNextMonth { get; }

        public global::System.String Description { get; }

        public virtual global::System.Boolean Equals(GetPaymentTerm_PaymentTerms_Items_PaymentTerm? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::System.Object.Equals(PaymentTermId, other.PaymentTermId)) && global::System.Object.Equals(Days, other.Days) && global::System.Object.Equals(DaysStartNextMonth, other.DaysStartNextMonth) && Description.Equals(other.Description);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPaymentTerm_PaymentTerms_Items_PaymentTerm)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * PaymentTermId.GetHashCode();
                hash ^= 397 * Days.GetHashCode();
                hash ^= 397 * DaysStartNextMonth.GetHashCode();
                hash ^= 397 * Description.GetHashCode();
                return hash;
            }
        }
    }

    /// <summary>
    /// If the argument externalSystemId (Int) is provided to the root query entity, it will be implicitly used to resolve any ext_ fields in the query.
    /// Note that if the variable is omitted, if ExternalSystemID is configured on the user performing the query this value will be used.
    /// Integration service users should normally have ExternalSystemID configured.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.14.0")]
    public partial interface IGetPaymentTermResult
    {
        public global::ContractingWorks.ReadApi.IGetPaymentTerm_PaymentTerms? PaymentTerms { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.14.0")]
    public partial interface IGetPaymentTerm_PaymentTerms
    {
        /// <summary>
        /// The items in the set
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::ContractingWorks.ReadApi.IGetPaymentTerm_PaymentTerms_Items>? Items { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.14.0")]
    public partial interface IGetPaymentTerm_PaymentTerms_PaymentTermSet : IGetPaymentTerm_PaymentTerms
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.14.0")]
    public partial interface IGetPaymentTerm_PaymentTerms_Items
    {
        public global::System.Int16 PaymentTermId { get; }

        public global::System.Int16 Days { get; }

        public global::System.Boolean DaysStartNextMonth { get; }

        public global::System.String Description { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.14.0")]
    public partial interface IGetPaymentTerm_PaymentTerms_Items_PaymentTerm : IGetPaymentTerm_PaymentTerms_Items
    {
    }

    /// <summary>
    /// Represents the operation service of the GetCustomer GraphQL operation
    /// <code>
    /// query GetCustomer($top: Int!, $filter: String!) {
    ///   customers(top: $top, filter: $filter, orderBy: { path: "sys_RowVersion", descending: false }) {
    ///     __typename
    ///     items {
    ///       __typename
    ///       customerId
    ///       customerNumber
    ///       name
    ///       email
    ///       paymentTerm {
    ///         __typename
    ///         paymentTermId
    ///         days
    ///         daysStartNextMonth
    ///         description
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.14.0")]
    public partial class GetCustomerQueryDocument : global::StrawberryShake.IDocument
    {
        private GetCustomerQueryDocument()
        {
        }

        public static GetCustomerQueryDocument Instance { get; } = new GetCustomerQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x28, 0x24, 0x74, 0x6f, 0x70, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x21, 0x2c, 0x20, 0x24, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x28, 0x74, 0x6f, 0x70, 0x3a, 0x20, 0x24, 0x74, 0x6f, 0x70, 0x2c, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3a, 0x20, 0x24, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2c, 0x20, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x3a, 0x20, 0x7b, 0x20, 0x70, 0x61, 0x74, 0x68, 0x3a, 0x20, 0x22, 0x73, 0x79, 0x73, 0x5f, 0x52, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x2c, 0x20, 0x64, 0x65, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x3a, 0x20, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x20, 0x7d, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x20, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x20, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x49, 0x64, 0x20, 0x64, 0x61, 0x79, 0x73, 0x20, 0x64, 0x61, 0x79, 0x73, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "ae171b8dbbd15ec41339afa1b43da494");
        public override global::System.String ToString()
        {
#if NETCOREAPP3_1_OR_GREATER
        return global::System.Text.Encoding.UTF8.GetString(Body);
#else
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetCustomer GraphQL operation
    /// <code>
    /// query GetCustomer($top: Int!, $filter: String!) {
    ///   customers(top: $top, filter: $filter, orderBy: { path: "sys_RowVersion", descending: false }) {
    ///     __typename
    ///     items {
    ///       __typename
    ///       customerId
    ///       customerNumber
    ///       name
    ///       email
    ///       paymentTerm {
    ///         __typename
    ///         paymentTermId
    ///         days
    ///         daysStartNextMonth
    ///         description
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.14.0")]
    public partial class GetCustomerQuery : global::ContractingWorks.ReadApi.IGetCustomerQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetCustomerResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        public GetCustomerQuery(global::StrawberryShake.IOperationExecutor<IGetCustomerResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetCustomerResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetCustomerResult>> ExecuteAsync(global::System.Int32 top, global::System.String filter, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(top, filter);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetCustomerResult>> Watch(global::System.Int32 top, global::System.String filter, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(top, filter);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Int32 top, global::System.String filter)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("top", FormatTop(top));
            variables.Add("filter", FormatFilter(filter));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetCustomerQueryDocument.Instance.Hash.Value, name: "GetCustomer", document: GetCustomerQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatTop(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        private global::System.Object? FormatFilter(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GetCustomer GraphQL operation
    /// <code>
    /// query GetCustomer($top: Int!, $filter: String!) {
    ///   customers(top: $top, filter: $filter, orderBy: { path: "sys_RowVersion", descending: false }) {
    ///     __typename
    ///     items {
    ///       __typename
    ///       customerId
    ///       customerNumber
    ///       name
    ///       email
    ///       paymentTerm {
    ///         __typename
    ///         paymentTermId
    ///         days
    ///         daysStartNextMonth
    ///         description
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.14.0")]
    public partial interface IGetCustomerQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetCustomerResult>> ExecuteAsync(global::System.Int32 top, global::System.String filter, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetCustomerResult>> Watch(global::System.Int32 top, global::System.String filter, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetPaymentTerm GraphQL operation
    /// <code>
    /// query GetPaymentTerm($top: Int!, $filter: String!) {
    ///   paymentTerms(top: $top, filter: $filter, orderBy: { path: "sys_RowVersion", descending: false }) {
    ///     __typename
    ///     items {
    ///       __typename
    ///       paymentTermId
    ///       days
    ///       daysStartNextMonth
    ///       description
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.14.0")]
    public partial class GetPaymentTermQueryDocument : global::StrawberryShake.IDocument
    {
        private GetPaymentTermQueryDocument()
        {
        }

        public static GetPaymentTermQueryDocument Instance { get; } = new GetPaymentTermQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x28, 0x24, 0x74, 0x6f, 0x70, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x21, 0x2c, 0x20, 0x24, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x28, 0x74, 0x6f, 0x70, 0x3a, 0x20, 0x24, 0x74, 0x6f, 0x70, 0x2c, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3a, 0x20, 0x24, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2c, 0x20, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x3a, 0x20, 0x7b, 0x20, 0x70, 0x61, 0x74, 0x68, 0x3a, 0x20, 0x22, 0x73, 0x79, 0x73, 0x5f, 0x52, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x2c, 0x20, 0x64, 0x65, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x3a, 0x20, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x20, 0x7d, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x49, 0x64, 0x20, 0x64, 0x61, 0x79, 0x73, 0x20, 0x64, 0x61, 0x79, 0x73, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "b995986cc549d6c4827f1c14dc131d5d");
        public override global::System.String ToString()
        {
#if NETCOREAPP3_1_OR_GREATER
        return global::System.Text.Encoding.UTF8.GetString(Body);
#else
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetPaymentTerm GraphQL operation
    /// <code>
    /// query GetPaymentTerm($top: Int!, $filter: String!) {
    ///   paymentTerms(top: $top, filter: $filter, orderBy: { path: "sys_RowVersion", descending: false }) {
    ///     __typename
    ///     items {
    ///       __typename
    ///       paymentTermId
    ///       days
    ///       daysStartNextMonth
    ///       description
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.14.0")]
    public partial class GetPaymentTermQuery : global::ContractingWorks.ReadApi.IGetPaymentTermQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetPaymentTermResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        public GetPaymentTermQuery(global::StrawberryShake.IOperationExecutor<IGetPaymentTermResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetPaymentTermResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetPaymentTermResult>> ExecuteAsync(global::System.Int32 top, global::System.String filter, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(top, filter);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetPaymentTermResult>> Watch(global::System.Int32 top, global::System.String filter, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(top, filter);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Int32 top, global::System.String filter)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("top", FormatTop(top));
            variables.Add("filter", FormatFilter(filter));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetPaymentTermQueryDocument.Instance.Hash.Value, name: "GetPaymentTerm", document: GetPaymentTermQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatTop(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        private global::System.Object? FormatFilter(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GetPaymentTerm GraphQL operation
    /// <code>
    /// query GetPaymentTerm($top: Int!, $filter: String!) {
    ///   paymentTerms(top: $top, filter: $filter, orderBy: { path: "sys_RowVersion", descending: false }) {
    ///     __typename
    ///     items {
    ///       __typename
    ///       paymentTermId
    ///       days
    ///       daysStartNextMonth
    ///       description
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.14.0")]
    public partial interface IGetPaymentTermQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetPaymentTermResult>> ExecuteAsync(global::System.Int32 top, global::System.String filter, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetPaymentTermResult>> Watch(global::System.Int32 top, global::System.String filter, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the CWGQLClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.14.0")]
    public partial class CWGQLClient : global::ContractingWorks.ReadApi.ICWGQLClient
    {
        private readonly global::ContractingWorks.ReadApi.IGetCustomerQuery _getCustomer;
        private readonly global::ContractingWorks.ReadApi.IGetPaymentTermQuery _getPaymentTerm;
        public CWGQLClient(global::ContractingWorks.ReadApi.IGetCustomerQuery getCustomer, global::ContractingWorks.ReadApi.IGetPaymentTermQuery getPaymentTerm)
        {
            _getCustomer = getCustomer ?? throw new global::System.ArgumentNullException(nameof(getCustomer));
            _getPaymentTerm = getPaymentTerm ?? throw new global::System.ArgumentNullException(nameof(getPaymentTerm));
        }

        public static global::System.String ClientName => "CWGQLClient";
        public global::ContractingWorks.ReadApi.IGetCustomerQuery GetCustomer => _getCustomer;
        public global::ContractingWorks.ReadApi.IGetPaymentTermQuery GetPaymentTerm => _getPaymentTerm;
    }

    /// <summary>
    /// Represents the CWGQLClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.14.0")]
    public partial interface ICWGQLClient
    {
        global::ContractingWorks.ReadApi.IGetCustomerQuery GetCustomer { get; }

        global::ContractingWorks.ReadApi.IGetPaymentTermQuery GetPaymentTerm { get; }
    }
}

namespace ContractingWorks.ReadApi.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.14.0")]
    public partial class GetCustomerResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::ContractingWorks.ReadApi.GetCustomerResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetCustomerResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::ContractingWorks.ReadApi.IGetCustomerResult);
        public GetCustomerResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetCustomerResultInfo info)
            {
                return new GetCustomerResult(MapIGetCustomer_Customers(info.Customers, snapshot));
            }

            throw new global::System.ArgumentException("GetCustomerResultInfo expected.");
        }

        private global::ContractingWorks.ReadApi.IGetCustomer_Customers? MapIGetCustomer_Customers(global::ContractingWorks.ReadApi.State.CustomerSetData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetCustomer_Customers returnValue = default !;
            if (data?.__typename.Equals("CustomerSet", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetCustomer_Customers_CustomerSet(MapIGetCustomer_Customers_ItemsNonNullableArray(data.Items, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::ContractingWorks.ReadApi.IGetCustomer_Customers_Items>? MapIGetCustomer_Customers_ItemsNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::ContractingWorks.ReadApi.State.CustomerData>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var customers = new global::System.Collections.Generic.List<global::ContractingWorks.ReadApi.IGetCustomer_Customers_Items>();
            foreach (global::ContractingWorks.ReadApi.State.CustomerData child in list)
            {
                customers.Add(MapNonNullableIGetCustomer_Customers_Items(child, snapshot));
            }

            return customers;
        }

        private global::ContractingWorks.ReadApi.IGetCustomer_Customers_Items MapNonNullableIGetCustomer_Customers_Items(global::ContractingWorks.ReadApi.State.CustomerData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetCustomer_Customers_Items returnValue = default !;
            if (data.__typename.Equals("Customer", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetCustomer_Customers_Items_Customer(data.CustomerId ?? throw new global::System.ArgumentNullException(), data.CustomerNumber, data.Name, data.Email, MapIGetCustomer_Customers_Items_PaymentTerm(data.PaymentTerm, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::ContractingWorks.ReadApi.IGetCustomer_Customers_Items_PaymentTerm? MapIGetCustomer_Customers_Items_PaymentTerm(global::ContractingWorks.ReadApi.State.PaymentTermData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetCustomer_Customers_Items_PaymentTerm returnValue = default !;
            if (data?.__typename.Equals("PaymentTerm", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetCustomer_Customers_Items_PaymentTerm_PaymentTerm(data.PaymentTermId ?? throw new global::System.ArgumentNullException(), data.Days ?? throw new global::System.ArgumentNullException(), data.DaysStartNextMonth ?? throw new global::System.ArgumentNullException(), data.Description ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.14.0")]
    public partial class GetCustomerResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetCustomerResultInfo(global::ContractingWorks.ReadApi.State.CustomerSetData? customers, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Customers = customers;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::ContractingWorks.ReadApi.State.CustomerSetData? Customers { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetCustomerResultInfo(Customers, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.14.0")]
    public partial class GetPaymentTermResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::ContractingWorks.ReadApi.GetPaymentTermResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetPaymentTermResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::ContractingWorks.ReadApi.IGetPaymentTermResult);
        public GetPaymentTermResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetPaymentTermResultInfo info)
            {
                return new GetPaymentTermResult(MapIGetPaymentTerm_PaymentTerms(info.PaymentTerms, snapshot));
            }

            throw new global::System.ArgumentException("GetPaymentTermResultInfo expected.");
        }

        private global::ContractingWorks.ReadApi.IGetPaymentTerm_PaymentTerms? MapIGetPaymentTerm_PaymentTerms(global::ContractingWorks.ReadApi.State.PaymentTermSetData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetPaymentTerm_PaymentTerms returnValue = default !;
            if (data?.__typename.Equals("PaymentTermSet", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetPaymentTerm_PaymentTerms_PaymentTermSet(MapIGetPaymentTerm_PaymentTerms_ItemsNonNullableArray(data.Items, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::ContractingWorks.ReadApi.IGetPaymentTerm_PaymentTerms_Items>? MapIGetPaymentTerm_PaymentTerms_ItemsNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::ContractingWorks.ReadApi.State.PaymentTermData>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var paymentTerms = new global::System.Collections.Generic.List<global::ContractingWorks.ReadApi.IGetPaymentTerm_PaymentTerms_Items>();
            foreach (global::ContractingWorks.ReadApi.State.PaymentTermData child in list)
            {
                paymentTerms.Add(MapNonNullableIGetPaymentTerm_PaymentTerms_Items(child, snapshot));
            }

            return paymentTerms;
        }

        private global::ContractingWorks.ReadApi.IGetPaymentTerm_PaymentTerms_Items MapNonNullableIGetPaymentTerm_PaymentTerms_Items(global::ContractingWorks.ReadApi.State.PaymentTermData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetPaymentTerm_PaymentTerms_Items returnValue = default !;
            if (data.__typename.Equals("PaymentTerm", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetPaymentTerm_PaymentTerms_Items_PaymentTerm(data.PaymentTermId ?? throw new global::System.ArgumentNullException(), data.Days ?? throw new global::System.ArgumentNullException(), data.DaysStartNextMonth ?? throw new global::System.ArgumentNullException(), data.Description ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.14.0")]
    public partial class GetPaymentTermResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetPaymentTermResultInfo(global::ContractingWorks.ReadApi.State.PaymentTermSetData? paymentTerms, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            PaymentTerms = paymentTerms;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::ContractingWorks.ReadApi.State.PaymentTermSetData? PaymentTerms { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetPaymentTermResultInfo(PaymentTerms, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.14.0")]
    public partial class GetCustomerBuilder : global::StrawberryShake.OperationResultBuilder<global::ContractingWorks.ReadApi.IGetCustomerResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int16, global::System.Int16> _shortParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        public GetCustomerBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::ContractingWorks.ReadApi.IGetCustomerResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            ResultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _shortParser = serializerResolver.GetLeafValueParser<global::System.Int16, global::System.Int16>("Short") ?? throw new global::System.ArgumentException("No serializer for type `Short` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
        }

        protected override global::StrawberryShake.IOperationResultDataFactory<global::ContractingWorks.ReadApi.IGetCustomerResult> ResultDataFactory { get; }

        protected override global::StrawberryShake.IOperationResultDataInfo BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            return new GetCustomerResultInfo(Deserialize_IGetCustomer_Customers(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "customers")), entityIds, snapshot.Version);
        }

        private global::ContractingWorks.ReadApi.State.CustomerSetData? Deserialize_IGetCustomer_Customers(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("CustomerSet", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::ContractingWorks.ReadApi.State.CustomerSetData(typename, items: Deserialize_IGetCustomer_Customers_ItemsNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "items")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::ContractingWorks.ReadApi.State.CustomerData>? Deserialize_IGetCustomer_Customers_ItemsNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var customers = new global::System.Collections.Generic.List<global::ContractingWorks.ReadApi.State.CustomerData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                customers.Add(Deserialize_NonNullableIGetCustomer_Customers_Items(child));
            }

            return customers;
        }

        private global::ContractingWorks.ReadApi.State.CustomerData Deserialize_NonNullableIGetCustomer_Customers_Items(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Customer", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::ContractingWorks.ReadApi.State.CustomerData(typename, customerId: Deserialize_NonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "customerId")), customerNumber: Deserialize_Int32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "customerNumber")), name: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), email: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "email")), paymentTerm: Deserialize_IGetCustomer_Customers_Items_PaymentTerm(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "paymentTerm")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 Deserialize_NonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.Int32? Deserialize_Int32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.String? Deserialize_String(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::ContractingWorks.ReadApi.State.PaymentTermData? Deserialize_IGetCustomer_Customers_Items_PaymentTerm(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("PaymentTerm", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::ContractingWorks.ReadApi.State.PaymentTermData(typename, paymentTermId: Deserialize_NonNullableInt16(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "paymentTermId")), days: Deserialize_NonNullableInt16(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "days")), daysStartNextMonth: Deserialize_NonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "daysStartNextMonth")), description: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "description")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int16 Deserialize_NonNullableInt16(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _shortParser.Parse(obj.Value.GetInt16()!);
        }

        private global::System.Boolean Deserialize_NonNullableBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }

        private global::System.String Deserialize_NonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.14.0")]
    public partial class GetPaymentTermBuilder : global::StrawberryShake.OperationResultBuilder<global::ContractingWorks.ReadApi.IGetPaymentTermResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int16, global::System.Int16> _shortParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        public GetPaymentTermBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::ContractingWorks.ReadApi.IGetPaymentTermResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            ResultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _shortParser = serializerResolver.GetLeafValueParser<global::System.Int16, global::System.Int16>("Short") ?? throw new global::System.ArgumentException("No serializer for type `Short` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
        }

        protected override global::StrawberryShake.IOperationResultDataFactory<global::ContractingWorks.ReadApi.IGetPaymentTermResult> ResultDataFactory { get; }

        protected override global::StrawberryShake.IOperationResultDataInfo BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            return new GetPaymentTermResultInfo(Deserialize_IGetPaymentTerm_PaymentTerms(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "paymentTerms")), entityIds, snapshot.Version);
        }

        private global::ContractingWorks.ReadApi.State.PaymentTermSetData? Deserialize_IGetPaymentTerm_PaymentTerms(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("PaymentTermSet", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::ContractingWorks.ReadApi.State.PaymentTermSetData(typename, items: Deserialize_IGetPaymentTerm_PaymentTerms_ItemsNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "items")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::ContractingWorks.ReadApi.State.PaymentTermData>? Deserialize_IGetPaymentTerm_PaymentTerms_ItemsNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            if (obj.Value.ValueKind == System.Text.Json.JsonValueKind.Null)
            {
                return null;
            }

            var paymentTerms = new global::System.Collections.Generic.List<global::ContractingWorks.ReadApi.State.PaymentTermData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                paymentTerms.Add(Deserialize_NonNullableIGetPaymentTerm_PaymentTerms_Items(child));
            }

            return paymentTerms;
        }

        private global::ContractingWorks.ReadApi.State.PaymentTermData Deserialize_NonNullableIGetPaymentTerm_PaymentTerms_Items(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("PaymentTerm", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::ContractingWorks.ReadApi.State.PaymentTermData(typename, paymentTermId: Deserialize_NonNullableInt16(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "paymentTermId")), days: Deserialize_NonNullableInt16(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "days")), daysStartNextMonth: Deserialize_NonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "daysStartNextMonth")), description: Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "description")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int16 Deserialize_NonNullableInt16(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _shortParser.Parse(obj.Value.GetInt16()!);
        }

        private global::System.Boolean Deserialize_NonNullableBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }

        private global::System.String Deserialize_NonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            if (obj.Value.ValueKind == System.Text.Json.JsonValueKind.Null)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.14.0")]
    public partial class CustomerSetData
    {
        public CustomerSetData(global::System.String __typename, global::System.Collections.Generic.IReadOnlyList<global::ContractingWorks.ReadApi.State.CustomerData>? items = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Items = items;
        }

        public global::System.String __typename { get; }

        ///<summary>The items in the set</summary>
        public global::System.Collections.Generic.IReadOnlyList<global::ContractingWorks.ReadApi.State.CustomerData>? Items { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.14.0")]
    public partial class CustomerData
    {
        public CustomerData(global::System.String __typename, global::System.Int32? customerId = default !, global::System.Int32? customerNumber = default !, global::System.String? name = default !, global::System.String? email = default !, global::ContractingWorks.ReadApi.State.PaymentTermData? paymentTerm = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            CustomerId = customerId;
            CustomerNumber = customerNumber;
            Name = name;
            Email = email;
            PaymentTerm = paymentTerm;
        }

        public global::System.String __typename { get; }

        public global::System.Int32? CustomerId { get; }

        public global::System.Int32? CustomerNumber { get; }

        public global::System.String? Name { get; }

        public global::System.String? Email { get; }

        public global::ContractingWorks.ReadApi.State.PaymentTermData? PaymentTerm { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.14.0")]
    public partial class PaymentTermData
    {
        public PaymentTermData(global::System.String __typename, global::System.Int16? paymentTermId = default !, global::System.Int16? days = default !, global::System.Boolean? daysStartNextMonth = default !, global::System.String? description = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            PaymentTermId = paymentTermId;
            Days = days;
            DaysStartNextMonth = daysStartNextMonth;
            Description = description;
        }

        public global::System.String __typename { get; }

        public global::System.Int16? PaymentTermId { get; }

        public global::System.Int16? Days { get; }

        public global::System.Boolean? DaysStartNextMonth { get; }

        public global::System.String? Description { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.14.0")]
    public partial class PaymentTermSetData
    {
        public PaymentTermSetData(global::System.String __typename, global::System.Collections.Generic.IReadOnlyList<global::ContractingWorks.ReadApi.State.PaymentTermData>? items = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Items = items;
        }

        public global::System.String __typename { get; }

        ///<summary>The items in the set</summary>
        public global::System.Collections.Generic.IReadOnlyList<global::ContractingWorks.ReadApi.State.PaymentTermData>? Items { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.14.0")]
    public partial class CWGQLClientEntityIdFactory : global::StrawberryShake.IEntityIdSerializer
    {
        private static readonly global::System.Text.Json.JsonWriterOptions _options = new global::System.Text.Json.JsonWriterOptions()
        {Indented = false};
        public global::StrawberryShake.EntityId Parse(global::System.Text.Json.JsonElement obj)
        {
            global::System.String __typename = obj.GetProperty("__typename").GetString()!;
            return __typename switch
            {
                _ => throw new global::System.NotSupportedException()};
        }

        public global::System.String Format(global::StrawberryShake.EntityId entityId)
        {
            return entityId.Name switch
            {
                _ => throw new global::System.NotSupportedException()};
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.14.0")]
    public partial class CWGQLClientStoreAccessor : global::StrawberryShake.StoreAccessor
    {
        public CWGQLClientStoreAccessor(global::StrawberryShake.IOperationStore operationStore, global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer entityIdSerializer, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory> requestFactories, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory> resultDataFactories) : base(operationStore, entityStore, entityIdSerializer, requestFactories, resultDataFactories)
        {
        }
    }
}

namespace Microsoft.Extensions.DependencyInjection
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.9.14.0")]
    public static partial class CWGQLClientServiceCollectionExtensions
    {
        public static global::StrawberryShake.IClientBuilder<global::ContractingWorks.ReadApi.State.CWGQLClientStoreAccessor> AddCWGQLClient(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            var serviceCollection = new global::Microsoft.Extensions.DependencyInjection.ServiceCollection();
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp =>
            {
                ConfigureClient(sp, serviceCollection, strategy);
                return new ClientServiceProvider(global::Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(serviceCollection));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => new global::ContractingWorks.ReadApi.State.CWGQLClientStoreAccessor(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityIdSerializer>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::ContractingWorks.ReadApi.GetCustomerQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::ContractingWorks.ReadApi.GetPaymentTermQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::ContractingWorks.ReadApi.CWGQLClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::ContractingWorks.ReadApi.ICWGQLClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            return new global::StrawberryShake.ClientBuilder<global::ContractingWorks.ReadApi.State.CWGQLClientStoreAccessor>("CWGQLClient", services, serviceCollection);
        }

        private static global::Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureClient(global::System.IServiceProvider parentServices, global::Microsoft.Extensions.DependencyInjection.ServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IEntityStore, global::StrawberryShake.EntityStore>(services);
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IOperationStore>(services, sp => new global::StrawberryShake.OperationStore(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Transport.Http.IHttpConnection>(services, sp =>
            {
                var clientFactory = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Net.Http.IHttpClientFactory>(parentServices);
                return new global::StrawberryShake.Transport.Http.HttpConnection(() => clientFactory.CreateClient("CWGQLClient"));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.StringSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.BooleanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ShortSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IntSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LongSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.FloatSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DecimalSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UrlSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UUIDSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IdSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteArraySerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.TimeSpanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.JsonSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializerResolver>(services, sp => new global::StrawberryShake.Serialization.SerializerResolver(global::System.Linq.Enumerable.Concat(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(parentServices), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::ContractingWorks.ReadApi.IGetCustomerResult>, global::ContractingWorks.ReadApi.State.GetCustomerResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::ContractingWorks.ReadApi.IGetCustomerResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::ContractingWorks.ReadApi.IGetCustomerQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::ContractingWorks.ReadApi.IGetCustomerResult>, global::ContractingWorks.ReadApi.State.GetCustomerBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::ContractingWorks.ReadApi.IGetCustomerResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::ContractingWorks.ReadApi.IGetCustomerResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::ContractingWorks.ReadApi.IGetCustomerResult>>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>, global::StrawberryShake.Json.JsonResultPatcher>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::ContractingWorks.ReadApi.GetCustomerQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::ContractingWorks.ReadApi.IGetCustomerQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::ContractingWorks.ReadApi.GetCustomerQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::ContractingWorks.ReadApi.IGetPaymentTermResult>, global::ContractingWorks.ReadApi.State.GetPaymentTermResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::ContractingWorks.ReadApi.IGetPaymentTermResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::ContractingWorks.ReadApi.IGetPaymentTermQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::ContractingWorks.ReadApi.IGetPaymentTermResult>, global::ContractingWorks.ReadApi.State.GetPaymentTermBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::ContractingWorks.ReadApi.IGetPaymentTermResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::ContractingWorks.ReadApi.IGetPaymentTermResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::ContractingWorks.ReadApi.IGetPaymentTermResult>>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>, global::StrawberryShake.Json.JsonResultPatcher>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::ContractingWorks.ReadApi.GetPaymentTermQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::ContractingWorks.ReadApi.IGetPaymentTermQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::ContractingWorks.ReadApi.GetPaymentTermQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityIdSerializer, global::ContractingWorks.ReadApi.State.CWGQLClientEntityIdFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::ContractingWorks.ReadApi.CWGQLClient>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::ContractingWorks.ReadApi.ICWGQLClient>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::ContractingWorks.ReadApi.CWGQLClient>(sp));
            return services;
        }

        private sealed class ClientServiceProvider : System.IServiceProvider, System.IDisposable
        {
            private readonly System.IServiceProvider _provider;
            public ClientServiceProvider(System.IServiceProvider provider)
            {
                _provider = provider;
            }

            public object? GetService(System.Type serviceType)
            {
                return _provider.GetService(serviceType);
            }

            public void Dispose()
            {
                if (_provider is System.IDisposable d)
                {
                    d.Dispose();
                }
            }
        }
    }
}
